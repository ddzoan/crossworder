{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialCellState","Array","GRIDSIZE","map","letter","black","clueNumber","storage","key","JSON","parse","localStorage","getItem","data","setItem","stringify","topEdge","index","leftBlack","i","cells","topBlack","App","useState","setCells","highlightIndex","setHighlightIndex","updateHighlightIndex","newIndex","updateCells","length","mutateCellsAddClueNum","useEffect","handleKeydown","event","newCells","Math","floor","ctrlKey","metaKey","preventDefault","window","addEventListener","removeEventListener","updater","row","col","_","Row","slice","highlightedCell","onClick","bind","type","className","css","styles","cellData","Cell","highlighted","cell","clueNum","StyleSheet","create","display","borderWidth","borderStyle","borderColor","height","width","justifyContent","alignItems","textTransform","position","backgroundColor","fontSize","top","left","cellInput","border","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.104fef1b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {css, StyleSheet} from \"aphrodite\";\nimport './App.css';\n\nconst GRIDSIZE = 15;\n\nconst initialCellState = () => [...Array(GRIDSIZE*GRIDSIZE)].map(() => ({letter: '', black: false, clueNumber: null}));\n\nconst storage = {\n  get(key) {\n    return JSON.parse(localStorage.getItem(key));\n  },\n  set(key, data) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n};\n\nconst leftEdge = index => index % GRIDSIZE === 0;\nconst topEdge = index => index < GRIDSIZE;\nconst leftBlack = (i, cells) => i - 1 > 0 && cells[i-1].black;\nconst topBlack = (i, cells) => i - GRIDSIZE > 0 && cells[i-GRIDSIZE].black;\n\nconst mutateCellsAddClueNum = cells => {\n  let clueNumber = 1;\n  for(let i = 0; i < cells.length; i++) {\n    if(!cells[i].black) {\n      if(leftEdge(i) || topEdge(i) || leftBlack(i, cells) || topBlack(i, cells)) {\n        cells[i].clueNumber = clueNumber++;\n      } else {\n        cells[i].clueNumber = null;\n      }\n    }\n  }\n  return cells;\n};\n\nfunction App() {\n  const [cells, setCells] = useState(storage.get('cellData') || initialCellState());\n  const [highlightIndex, setHighlightIndex] = useState(storage.get('highlightIndex') || 0);\n  const updateHighlightIndex = newIndex => {\n    storage.set('highlightIndex', newIndex);\n    setHighlightIndex(newIndex);\n  };\n  const updateCells = cells => {\n    mutateCellsAddClueNum(cells);\n    storage.set('cellData', cells);\n    setCells(cells);\n  };\n  const rotationalSymmetry = true;\n\n  useEffect(() => {\n    const handleKeydown = event => {\n      const newCells = [...cells];\n      switch(event.key) {\n        case \"ArrowUp\":\n          if(Math.floor(highlightIndex / GRIDSIZE) > 0)\n            updateHighlightIndex(highlightIndex - GRIDSIZE);\n          break;\n        case \"ArrowDown\":\n          if(Math.floor(highlightIndex / GRIDSIZE) < GRIDSIZE - 1)\n            updateHighlightIndex(highlightIndex + GRIDSIZE);\n          break;\n        case \"ArrowLeft\":\n          if(highlightIndex % GRIDSIZE > 0)\n            updateHighlightIndex(highlightIndex - 1);\n          break;\n        case \"ArrowRight\":\n          if(highlightIndex % GRIDSIZE < GRIDSIZE - 1)\n            updateHighlightIndex(highlightIndex + 1);\n          break;\n        case \"a\":\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n          if(event.ctrlKey || event.metaKey) {\n            if(event.key === 'b') {\n              const black = !newCells[highlightIndex].black;\n              newCells[highlightIndex] = {letter: '', black};\n              if(rotationalSymmetry)\n                newCells[GRIDSIZE*GRIDSIZE - 1 - highlightIndex] = {letter: '', black};\n              event.preventDefault(); // stop firefox cmd b from opening bookmarks\n            }\n          } else {\n            newCells[highlightIndex] = {letter: event.key, black: false};\n          }\n          break;\n        case 'Backspace':\n          newCells[highlightIndex].letter = '';\n          event.preventDefault(); // stop backspace from navigating browser\n          break;\n        default:\n          break;\n      }\n      updateCells(newCells);\n    };\n    window.addEventListener('keydown', handleKeydown);\n    return () => window.removeEventListener('keydown', handleKeydown);\n  });\n  const updater = (row, col) => {\n    updateHighlightIndex(row * GRIDSIZE + col);\n  };\n  return (\n    <div>\n      <div>\n        {[...Array(GRIDSIZE)].map((_, i) => <Row data={cells.slice(GRIDSIZE*i, GRIDSIZE*i + GRIDSIZE)} highlightedCell={Math.floor(highlightIndex / GRIDSIZE) === i ? highlightIndex % GRIDSIZE : -1} onClick={updater.bind(null, i)} key={i} />)}\n      </div>\n      <button type=\"button\" onClick={() => updateCells(initialCellState())}>Reset Board</button>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction Row({data, highlightedCell, onClick}) {\n  return (\n    <div className={css(styles.row)}>\n      {data.map((cellData, i) => <Cell data={cellData} highlighted={highlightedCell === i} onClick={onClick.bind(null, i)} key={i}/>)}\n    </div>\n  );\n}\n\nfunction Cell({data, highlighted, onClick}) {\n  return (\n    <div className={css(styles.cell, highlighted && styles.highlighted, data.black && styles.black)} onClick={onClick}>\n      {data.clueNumber && <span className={css(styles.clueNum)}>{data.clueNumber}</span>}\n      {data.letter}\n    </div>\n  );\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    display: 'flex',\n  },\n  cell: {\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: 'grey',\n    height: 30,\n    width: 30,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textTransform: 'uppercase',\n    position: 'relative',\n  },\n  highlighted: {\n    backgroundColor: 'lightblue',\n  },\n  black: {\n    backgroundColor: 'black',\n  },\n  clueNum: {\n    fontSize: 10,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  },\n  cellInput: {\n    border: 'none',\n    width: 28,\n    textTransform: 'uppercase',\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}